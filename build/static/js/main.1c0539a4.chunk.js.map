{"version":3,"sources":["routers/mainRoutes.ts","pages/Home/index.tsx","redux/actionTypes/common.ts","redux/reducers/common/example/index.ts","redux/reducers/common/index.ts","configs/Redux/rootReducer.ts","configs/Redux/store.ts","Main.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["path","pageName","exact","component","useState","i","setI","type","onClick","TYPES","initialState","Common","combineReducers","example","state","payload","rootReducer","reducers","composeWithDevTool","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","Main","className","mainRoutes","map","route","App","fallback","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yRAMe,GACb,CACEA,KAAM,IACNC,SAAU,OACVC,OAAO,EACPC,UCNS,WACX,MAAkBC,mBAAS,GAA3B,mBAAOC,EAAP,KAAUC,EAAV,KAEA,OACE,yBAAQC,KAAK,SAASC,QAAS,kBAAMF,GAAK,SAACD,GAAD,OAAOA,EAAI,MAArD,wBACcA,Q,eCVLI,EACF,UCGLC,EAAiC,GCChC,IAAMC,EAASC,YAAgB,CACpCC,QDAK,WAGJ,IAFDC,EAEA,uDAFQJ,EAER,yCADEH,EACF,EADEA,KAAMQ,EACR,EADQA,QAER,OAAQR,GACN,KAAKE,EACH,OAAO,2BACFK,GACAC,GAGP,QACE,OAAOD,MEbAE,EAAcJ,YAAgB,eACtCK,ICKCC,EACJC,OAAOC,sCAAwCC,IAE3CC,EAAQC,YAAYP,EALL,GAKgCE,KCYtCM,G,MAjBF,kBACX,cAAC,IAAD,CAAUF,MAAOA,EAAjB,SACE,qBAAKG,UAAU,eAAf,SACE,cAAC,IAAD,UACGC,EAAWC,KAAI,SAACC,GAAD,OACd,cAAC,IAAD,CAEE5B,KAAM4B,EAAM5B,KACZE,MAAO0B,EAAM1B,MACbC,UAAWyB,EAAMzB,WAHZyB,EAAM5B,iBCDR6B,EARH,kBACV,cAAC,IAAD,UACE,cAAC,WAAD,CAAUC,SAAS,oBAAnB,SACE,cAAC,EAAD,SCGcC,QACW,cAA7BZ,OAAOa,SAASC,UAEe,UAA7Bd,OAAOa,SAASC,UAEhBd,OAAOa,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1c0539a4.chunk.js","sourcesContent":["// components\r\nimport Home from \"@/pages/Home\";\r\n\r\n/**\r\n * define main pages routes\r\n */\r\nexport default [\r\n  {\r\n    path: \"/\",\r\n    pageName: \"Home\",\r\n    exact: true,\r\n    component: Home,\r\n  },\r\n];\r\n","// libs\r\nimport { useState } from \"react\";\r\n// others\r\nimport \"./style.scss\";\r\n\r\nconst Home = () => {\r\n  const [i, setI] = useState(0);\r\n\r\n  return (\r\n    <button type=\"button\" onClick={() => setI((i) => i + 1)}>\r\n      Count now: {i}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","export const TYPES = {\r\n  EXAMPLE: \"EXAMPLE\",\r\n};\r\n","import { TYPES } from \"@/redux/actionTypes/common\";\r\n\r\ntype TREDUCER = {};\r\n\r\nconst initialState: Expand<TREDUCER> = {};\r\n\r\nexport function example(\r\n  state = initialState,\r\n  { type, payload }: { type: string; payload: TREDUCER }\r\n) {\r\n  switch (type) {\r\n    case TYPES.EXAMPLE: {\r\n      return {\r\n        ...state,\r\n        ...payload,\r\n      };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}\r\n","// libs\r\nimport { combineReducers } from \"redux\";\r\n// reducers\r\nimport { example } from \"./example\";\r\n\r\nexport const Common = combineReducers({\r\n  example,\r\n});\r\n","// libs\r\nimport { combineReducers } from \"redux\";\r\n// reducers\r\nimport * as reducers from \"@/redux/reducers\";\r\n\r\nexport const rootReducer = combineReducers({\r\n  ...reducers,\r\n});\r\nexport type ROOT_STATE = ReturnType<typeof rootReducer>;\r\nexport type PAGES_REDUCER = keyof ROOT_STATE;\r\n","import { createStore, compose } from \"redux\";\r\nimport { rootReducer } from \"./rootReducer\";\r\n\r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n  }\r\n}\r\n\r\nconst initialState = {};\r\n\r\nconst composeWithDevTool =\r\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(rootReducer, initialState, composeWithDevTool());\r\n\r\nexport { store };\r\n","// libs import\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\n// routers\r\nimport mainRoutes from \"@/routers/mainRoutes\";\r\n// others\r\nimport { store } from \"@/configs/Redux\";\r\nimport \"./styles/common.scss\";\r\n\r\nconst Main = () => (\r\n  <Provider store={store}>\r\n    <div className=\"main-wrapper\">\r\n      <Switch>\r\n        {mainRoutes.map((route) => (\r\n          <Route\r\n            key={route.path}\r\n            path={route.path}\r\n            exact={route.exact}\r\n            component={route.component}\r\n          />\r\n        ))}\r\n      </Switch>\r\n    </div>\r\n  </Provider>\r\n);\r\n\r\nexport default Main;\r\n","// libs\r\nimport { Suspense } from \"react\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n// components\r\nimport Main from \"./Main\";\r\n\r\nconst App = () => (\r\n  <BrowserRouter>\r\n    <Suspense fallback=\"Suspense fallback\">\r\n      <Main />\r\n    </Suspense>\r\n  </BrowserRouter>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          // console.log(\r\n          //   \"This web app is being served cache-first by a service \" +\r\n          //     \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\r\n          // );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      const mRegistration = registration;\r\n      mRegistration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              // console.log(\r\n              //   \"New content is available and will be used when all \" +\r\n              //     \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\r\n              // );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else if (config && config.onSuccess) {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              // console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              config.onSuccess(registration);\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    // error\r\n    .catch(() => {\r\n      // console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      // console.log(\"No internet connection found. App is running in offline mode.\");\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\n// render application\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}